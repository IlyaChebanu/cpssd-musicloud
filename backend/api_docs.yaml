swagger: '2.0'
info:
  version: "1"
  title: "MusiCloud API"
  description: >-
    This is the REST API documentation for the MusiCloud music mixing platform.
host: "dcumusicloud.com"
basePath: "/api/v1"
tags:
  - name: "users"
    description: "User operations"
  - name: "auth"
    description: "Authentication operations"
  - name: "audio"
    description: "Audio operations"
  - name: "s3"
    description: "S3 Bucket operations"
schemes:
  - "https"
paths:
  /audio:
    post:
      tags:
      - "audio"
      summary: "Create a new song project"
      description: "Create a blank song project you can then edit"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the new songs' name and have a song project created, and it's sid returned."
          required: true
          schema:
            type: "object"
            properties:
              title:
                type: "string"
                example: "A great song"
      responses:
        200:
          description: "Song Created"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Your song project has been created"
              sid:
                type: "integer"
                example: 1
        401:
          description: "Access_token missing or expired."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Request missing access_token."
        404:
          description: "Failed to get sid."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A result could not be found."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"

  /audio/state:
    get:
      tags:
      - "audio"
      summary: "Get the selected songs' state"
      description: "Returns the song_state object for the requested sid if the user has edit permission."
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "sid"
          type: "string"
          required: false
          description: "The sid of the sond you wish to edit."
      responses:
        200:
          description: "Song loaded"
          schema:
            type: "object"
            properties:
              song_state:
                type: "object"
        401:
          description: "Access_token missing or expired."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Request missing access_token."
        403:
          description: "Not permitted to edit"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "You are not permitted to edit song: 1"
        422:
          description: "Missing sid param"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "sid param can't be empty!"
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"
    post:
      tags:
      - "audio"
      summary: "Update the current songs' state"
      description: "By sending the access_token of an approved editor for a song, that editor may send a new song_state object for that song."
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the new song_state object & the songs' ID here."
          required: true
          schema:
            type: "object"
            properties:
              sid:
                type: "integer"
                example: 101
              song_state:
                type: "object"
                properties:
                  tracks:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        track_effects:
                          type: "object"
                          properties:
                            vol:
                              type: "integer"
                              example: 100
                            pan:
                              type: "integer"
                              example: 50
                            mute:
                              type: "boolean"
                              example: False
                            solo:
                              type: "boolean"
                              example: False
                        sounds:
                          type: "array"
                          items:
                            type: "object"
                            properties:
                              src:
                                type: "string"
                                example: "http://music.ie"
                              location:
                                type: "integer"
                                example: 10
                              effect:
                                type: "object"
                                properties:
                                  an_effect:
                                    type: "string"
                                    example: "placeholder"
      responses:
        200:
          description: "State saved"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Song state saved."
        401:
          description: "Access_token missing or expired."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Request missing access_token."
        403:
          description: "Not permitted to edit"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "You are not permitted to edit song: 1"
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"
  
  /s3/signed-form-post:
    post:
      tags:
      - "s3"
      summary: "Get signed s3 bucket url to directly upload the file from the client to the s3 bucket"
      description: "The endpoint requires dir, fileName and fileType parameters and provides the signed_url object that contains 'url' parameter and 'fields' object that has 'key' parameter. The url can be put together by appending 'key' (filename) parameter to the 'url' parameter. The PUT request is to be used to upload a SINGLE file to s3 bucket by providing the URL, the file data as FormData named 'file' and options headers containing 'Content-Type': fileType."
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the storage dir, desired fileName and fileType"
          required: true
          schema:
            type: "object"
            properties:
              dir:
                pattern: "^(audio|profiler|compiled_audio)$"
                type: "string"
                example: "audio"
              fileName:
                type: "string"
                example: "clap.wav"
              fileType:
                type: "string"
                example: "audio/wav"
              
      responses:
        200:
          description: "Signed url provided"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Signed url for file uploading has been provided"
        401:
          description: "Access_token missing or expired."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Request missing access_token."

        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"

  /auth/verify:
    get:
      tags:
      - "auth"
      summary: "Verify new user's email"
      description: "When the user clicks the link sent to their email, there account will be verified."
      produces:
      - "application/json"
      parameters:
        - in: "query"
          name: "code"
          required: true
          type: "string"
          description: "The randomly generated code emailed to the user on account creation."
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Verified."
        400:
          description: "Bad info sent, or info missing."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid code."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"
                    
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Login using a username and a password"
      description: "By passing a user's username along with their password to this request as part of the request body, if the user exists in the database, an access token will be returned to them. The user should be verified in order to log in.\n\nIf a device ID (did) is sent in the request body, it will be saved for the purpose of sending push notifications later (OPTIONAL)."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User to be logged in."
        required: false
        schema:
          type: "object"
          properties:
            username:
              type: "string"
              example: "Herman"
            password:
              type: "string"
              example: "SecurePassword"
            did:
              type: "string"
              example: "efoewjoigreong24235f"
      responses:
        200:
          description: "Logged in"
          schema:
            type: "object"
            properties:
              access_token:
                type: "string"
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MywidXNlcm5hbWUiOiJFZGRpZSBNdXJwaHkiLCJzdHVkZW50X2lkIjoiMTQ1Nzc4MDAiLCJmaXJzdF9uYW1lIjoiRW1pbHkiLCJzdXJuYW1lIjoiTWNHaXZlcm4iLCJ2ZXJpZmllZCI6MSwiZW1haWwiOiJlbWlseS5tY2dpdmVybjRAbWFpbC5kY3UuaWUiLCJwYXNzd3JkIjoiJDJhJDEwJERJSElubVBTWVJvNjhqUUd6TC9HVWU2cUxQaWtNSVY2VGtyc29PTzhaTXU4Z2hSZlJBTE95In0.fPZVIxg5a77bm08ErdWtxgYw3B_IgfNxO8BAsWAimyo"
        401:
          description: "Bad info sent, or info missing."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Bad login credentials."
        403:
          description: "The account has yet to be verified."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Account not verified."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"
                
  /auth/logout:
    post:
      tags:
      - "auth"
      summary: "Deauthorise a token"
      description: "By passing an access_token to this endpoint in the request header, the corrisponding token will be removed the Logins table. This means that the passed token will no longer be valid for use with access_token protected endpoints. \n\nIf a device ID (did) is sent in the request body, it will be used for the purpose of stopping push notifications being sent later (OPTIONAL)."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Device ID to be removed from the Notifications table"
          required: false
          schema:
            type: "object"
            properties:
              did:
                type: "string"
                example: "efoewjoigreong24235f"
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User has been successfully logged out!"
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."

  /users:
    get:
      tags:
      - "users"
      summary: "Get a user's publicly available information."
      description: "By passing the username of the user who's information you want to see, along with your access_token, you will receive back a JSON object with a user's basic profile information."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "username"
          type: "string"
          required: false
          description: "The username of the user who's info you wish to view."
      responses:
        200:
          description: "User's Info"
          schema:
            type: "object"
            properties:
              followers:
                type: "integer"
                example: 200
              following:
                type: "integer"
                example: 500
              likes:
                type: "integer"
                example: 123
              posts:
                type: "integer"
                example: 100
              profile_pic_url:
                type: "string"
                example: "http://image.fake"
              songs:
                type: "integer"
                example: 321
              username:
                type: "string"
                example: "TestUser"
              follow_notification_status:
                type: "integer"
                example: 0
              post_notification_status:
                type: "integer"
                example: 0
              song_notification_status:
                type: "integer"
                example: 0
              like_notification_status:
                type: "integer"
                example: 0
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
    post:
      tags:
      - "users"
      summary: "Register a new user"
      description: "Creates a new user entry in the Users table. This is step 1 in the authentication process."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New user's info."
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
              example: "newUser"
            email:
              type: "string"
              example: "newUser@gmail.com"
            password:
              type: "string"
              example: "securePassword1234!"
      responses:
        200:
          description: "User created"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User created!"
        400:
          description: "Invalid email address format."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid email address."
        409:
          description: "User already exists."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User already exists!"
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error while hashing password."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
    patch:
      tags:
      - "users"
      summary: "Change a user's info"
      description: "Changes the email and or password for user who's access_token has been passed in. This endpoint requires the user to sent there current_password."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization Header"
        description: "This is where you should set your access_token."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "New info"
        schema:
          type: "object"
          properties:
            password:
              type: "string"
              example: "securePassword1234!"
            email:
              type: "string"
              example: "fake@email.com"
            current_password:
              type: "string"
              example: "1234"
      responses:
        200:
          description: "Details updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Email reset, and verification mail sent. Password reset."
        403:
          description: "Bad credentials."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Incorrect password!"
        409:
          description: "Email address already in use"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Duplicate entry"
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error while hashing password."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/notifications:
    patch:
      tags:
      - "users"
      summary: "Mute/Unmute all a user's notifications"
      description: "Changes the user's notification status (for all types of notification) between muted(0) & unmuted(1).\n\nThe status sent may only be 1 or 0."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization Header"
        description: "This is where you should set your access_token."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Notification status\n\n0 - Unmuted\n\n1 - muted"
        schema:
          type: "object"
          properties:
            status:
              type: "integer"
              example: 0
      responses:
        200:
          description: "Status updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "All notifications unmuted"
        401:
          description: "Bad credentials."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Incorrect password!"
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error while hashing password."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/notifications/follows:
    patch:
      tags:
      - "users"
      summary: "Mute/Unmute all a user's follow notifications"
      description: "Changes the user's notification status (for 'follow' types of notification) between muted(0) & unmuted(1).\n\nThe status sent may only be 1 or 0."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization Header"
        description: "This is where you should set your access_token."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Notification status\n\n0 - Unmuted\n\n1 - muted"
        schema:
          type: "object"
          properties:
            status:
              type: "integer"
              example: 0
      responses:
        200:
          description: "Status updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Follow notifications unmuted"
        401:
          description: "Bad credentials."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Incorrect password!"
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error while hashing password."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/notifications/posts:
    patch:
      tags:
      - "users"
      summary: "Mute/Unmute all a user's post notifications"
      description: "Changes the user's notification status (for 'post' types of notification) between muted(0) & unmuted(1).\n\nThe status sent may only be 1 or 0."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization Header"
        description: "This is where you should set your access_token."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Notification status\n\n0 - Unmuted\n\n1 - muted"
        schema:
          type: "object"
          properties:
            status:
              type: "integer"
              example: 0
      responses:
        200:
          description: "Status updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Post notifications unmuted"
        401:
          description: "Bad credentials."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Incorrect password!"
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error while hashing password."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/notifications/songs:
    patch:
      tags:
      - "users"
      summary: "Mute/Unmute all a user's song notifications"
      description: "Changes the user's notification status (for 'song' types of notification) between muted(0) & unmuted(1).\n\nThe status sent may only be 1 or 0."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization Header"
        description: "This is where you should set your access_token."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Notification status\n\n0 - Unmuted\n\n1 - muted"
        schema:
          type: "object"
          properties:
            status:
              type: "integer"
              example: 0
      responses:
        200:
          description: "Status updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Song notifications unmuted"
        401:
          description: "Bad credentials."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Incorrect password!"
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error while hashing password."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/notifications/likes:
    patch:
      tags:
      - "users"
      summary: "Mute/Unmute all a user's like notifications"
      description: "Changes the user's notification status (for 'like' types of notification) between muted(0) & unmuted(1).\n\nThe status sent may only be 1 or 0."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization Header"
        description: "This is where you should set your access_token."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Notification status\n\n0 - Unmuted\n\n1 - muted"
        schema:
          type: "object"
          properties:
            status:
              type: "integer"
              example: 0
      responses:
        200:
          description: "Status updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Like notifications unmuted"
        401:
          description: "Bad credentials."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Incorrect password!"
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error while hashing password."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/reverify:
    post:
      tags:
      - "users"
      summary: "Resend verification email"
      description: "Checks if a given user is in the process of being verified and resends the verification email if they are."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Email of the user looking for a new verification email"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
              example: "newUser@gmail.com"
      responses:
        200:
          description: "Resent verification email."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Verification email sent."
        400:
          description: "Some info is bad or is missing!"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Bad request."
        403:
          description: "Request forbidden as the user is already verified."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Already verified."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/post:
    post:
      tags:
      - "users"
      summary: "Post a new status update."
      description: "Takes the text and access_token of a given user and makes a post on there account."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization Header"
        description: "This is where you should set your access_token."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "The message you wish to post."
        required: true
        schema:
          type: "object"
          properties:
            message:
              type: "string"
              example: "Hi my amazing fans!"
      responses:
        200:
          description: "Post made successfully"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Message posted."
        401:
          description: "User's token has expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Failed to decode token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/posts:
    get:
      tags:
      - "users"
      summary: "Get all of the posts made by a particular user."
      description: "This endpoint takes several arguments and returns a subset of posts, ordered chronologically from newest to oldest, made by a particular user. The arguments that can be provided are as follows:\n\n \"username\" = If a 'next_page' or 'back_page' argument is not sent, then this argument is mandatory. This should be set to the username of the user who's posts you are trying to view.\n\n \"posts_per_page\" = If a 'next_page' or 'back_page' argument is not sent, then this an optional argument you may send. This is used to adjust the number of posts you will get back per page of results.\n\n \"current_page\" = If a 'next_page' or 'back_page' argument is not sent, then this is an optional argument you may send. This is used to navigate through each of the pages of results. If this argument is not sent, the default page of results returned will be page 1.\n\n \"next_page\" = If this value is sent, then a back_page value should not be sent. This value should be set to a 'next_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request.\n\n \"back_page\" = If this value is sent, then a next_page value should not be sent. This value should be set to a 'back_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "username"
          type: "string"
          required: false
          description: "The username of the user who's posts you wish to view."
        - in: "query"
          name: "current_page"
          type: "string"
          required: false
          description: "The page of results you wish to view."
        - in: "query"
          name: "posts_per_page"
          type: "string"
          required: false
          description: "The number of posts you wish to have per page of results."
        - in: "query"
          name: "next_page"
          type: "string"
          required: false
          description: "A next page token to get the next page of results."
        - in: "query"
          name: "back_page"
          type: "string"
          required: false
          description: "A back_page token to get the previous page of results."
      responses:
        200:
          description: "Post made successfully"
          schema:
            type: "object"
            properties:
              back_page:
                type: "string"
                example: "will be null or a token"
              current_page:
                type: "integer"
                example: 1
              next_page:
                type: "string"
                example: "will be null or a token"
              posts:
                type: "array"
                items:
                  type: "array"
                  items:
                    type: "string"
                  example:
                    - "test message"
                    - "Fri, 01 Nov 2019 19:12:27 GMT"
              posts_per_page:
                type: "integer"
                example: 50
              total_pages:
                type: "integer"
                example: 2
        401:
          description: "User's token has expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Failed to decode token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/reset:
    get:
      tags:
      - "users"
      summary: "Get a password reset code emailed to you."
      description: "This endpoint takes the email address of the user who has forgotten there password, and email's them an 8-digit code they can use to reset there password. This code is valid for up to 30 minutes. This endpoint can be hit again for a new code."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "query"
          name: "email"
          type: "string"
          required: false
          description: "The email address of the user who has forgotten there password."
      responses:
        200:
          description: "Password reset code sent"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Email sent."
        400:
          description: "Bad request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Bad request."
        422:
          description: "Malformed request parameters."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Email param can't be empty!"
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
    post:
      tags:
      - "users"
      summary: "Get a password reset code emailed to you."
      description: "This endpoint takes the email address of the user who has forgotten there password, and email's them an 8-digit code they can use to reset there password. This code is valid for up to 30 minutes. This endpoint can be hit again for a new code."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The request body should contain, the reset code emailed to the user, the user's email address and the new password they wish to set."
        required: true
        schema:
          type: "object"
          properties:
            code:
              type: "integer"
              example: 12345678
            email:
              type: "string"
              example: "test@email.com"
            password:
              type: "string"
              example: "newPassword"
      responses:
        200:
          description: "Password reset."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Password reset."
        400:
          description: "Bad request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Bad request."
        401:
          description: "Reset code expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "The reset code has expired. Please request a new one."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error while hashing password."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/follow:
    post:
      tags:
      - "users"
      summary: "Follow a user"
      description: "By passing an access_token to this endpoint in the request header, along with the username of the user you wish to follow in the request body, you will then be following that user."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "username of the user you wish to follow."
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                example: "testUser"
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "You are now following: testUser"
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/unfollow:
    post:
      tags:
      - "users"
      summary: "Unfollow a user"
      description: "By passing an access_token to this endpoint in the request header, along with the username of the user you wish to unfollow in the request body, you will then be no longer following that user."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "username of the user you wish to unfollow."
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                example: "testUser"
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "You are now no longer following: testUser"
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
  
  /users/profiler:
    patch:
      tags:
      - "users"
      summary: "Update a user's profiler URL."
      description: "Change a user's profile picture by sending there access_token and the picture URL to this endpoint."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the profiler url."
          required: true
          schema:
            type: "object"
            properties:
              url:
                type: "string"
                example: "http://image.fake"
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Profile picture URL updated."
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/compiled_url:
    patch:
      tags:
      - "audio"
      summary: "Update the URL for the compiled version of the selected song."
      description: "Change a songs compiled URL by sending an access_token for a user permitted to edit the song, the song ID, the duration of the compiled song in milliseconds, and the URL pointing to it."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the required information."
          required: true
          schema:
            type: "object"
            properties:
              url:
                type: "string"
                example: "http://image.fake"
              sid:
                type: "integer"
                example: 1
              duration:
                type: "integer"
                example: 15000
                
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Compiled song URL updated."
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/cover_art:
    patch:
      tags:
      - "audio"
      summary: "Update the URL for the cover art of the selected song."
      description: "Change a songs cover art URL by sending an access_token for a user permitted to edit the song, the song ID, and the URL pointing to the cover art."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the required information."
          required: true
          schema:
            type: "object"
            properties:
              url:
                type: "string"
                example: "http://image.fake"
              sid:
                type: "integer"
                example: 1
                
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Cover URL updated."
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/compiled_songs:
    get:
      tags:
      - "audio"
      summary: "Get all of the compiled songs available to listen to."
      description: "This endpoint takes several arguments and returns a subset of all the songs on our system unordered. The arguments that can be provided are as follows:\n\n \"username\" = If a 'next_page' or 'back_page' argument is not sent, then this is an optional argument you may send. This should be set to the username of the user who's songs you are trying to view.\n\n \"songs_per_page\" = If a 'next_page' or 'back_page' argument is not sent, then this an optional argument you may send. This is used to adjust the number of songs you will get back per page of results.\n\n \"current_page\" = If a 'next_page' or 'back_page' argument is not sent, then this is an optional argument you may send. This is used to navigate through each of the pages of results. If this argument is not sent, the default page of results returned will be page 1.\n\n \"next_page\" = If this value is sent, then a back_page value should not be sent. This value should be set to a 'next_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request.\n\n \"back_page\" = If this value is sent, then a next_page value should not be sent. This value should be set to a 'back_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "username"
          type: "string"
          required: false
          description: "The username of the user who's songs you wish to view."
        - in: "query"
          name: "current_page"
          type: "string"
          required: false
          description: "The page of results you wish to view."
        - in: "query"
          name: "songs_per_page"
          type: "string"
          required: false
          description: "The number of songs you wish to have per page of results."
        - in: "query"
          name: "next_page"
          type: "string"
          required: false
          description: "A next page token to get the next page of results."
        - in: "query"
          name: "back_page"
          type: "string"
          required: false
          description: "A back_page token to get the previous page of results."
      responses:
        200:
          description: "Successful search query"
          schema:
            type: "object"
            properties:
              back_page:
                type: "string"
                example: "will be null or a token"
              current_page:
                type: "integer"
                example: 1
              next_page:
                type: "string"
                example: "will be null or a token"
              songs:
                type: "array"
                items:
                  type: "object"
                  properties:
                    sid:
                      type: "integer"
                      example: 1
                    username:
                      type: "string"
                      example: "testUser"
                    title:
                      type: "string"
                      example: "A test song"
                    duration:
                      type: "integer"
                      example: 1
                    created:
                      type: "string"
                      example: "Wed, 13 Nov 2019 17:07:39 GMT"
                    public:
                      type: "integer"
                      example: 1
                    url:
                      type: "string"
                      example: "None"
                    cover:
                      type: "string"
                      example: "None"
                    likes:
                      type: "string"
                      example: 8
                    like_status:
                      type: "integer"
                      example: 0
                    description:
                      type: "string"
                      example: "A description"
              songs_per_page:
                type: "integer"
                example: 50
              total_pages:
                type: "integer"
                example: 2
        401:
          description: "User's token has expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Failed to decode token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/editable_songs:
    get:
      tags:
      - "audio"
      summary: "Get all of the songs the current user may edit editable."
      description: "This endpoint takes several arguments and returns a subset of all the editable songs for the current user on our system, unordered. The arguments that can be provided are as follows:\n\n \"songs_per_page\" = If a 'next_page' or 'back_page' argument is not sent, then this an optional argument you may send. This is used to adjust the number of songs you will get back per page of results.\n\n \"current_page\" = If a 'next_page' or 'back_page' argument is not sent, then this is an optional argument you may send. This is used to navigate through each of the pages of results. If this argument is not sent, the default page of results returned will be page 1.\n\n \"next_page\" = If this value is sent, then a back_page value should not be sent. This value should be set to a 'next_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request.\n\n \"back_page\" = If this value is sent, then a next_page value should not be sent. This value should be set to a 'back_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "current_page"
          type: "string"
          required: false
          description: "The page of results you wish to view."
        - in: "query"
          name: "songs_per_page"
          type: "string"
          required: false
          description: "The number of songs you wish to have per page of results."
        - in: "query"
          name: "next_page"
          type: "string"
          required: false
          description: "A next page token to get the next page of results."
        - in: "query"
          name: "back_page"
          type: "string"
          required: false
          description: "A back_page token to get the previous page of results."
      responses:
        200:
          description: "Successful search query"
          schema:
            type: "object"
            properties:
              back_page:
                type: "string"
                example: "will be null or a token"
              current_page:
                type: "integer"
                example: 1
              next_page:
                type: "string"
                example: "will be null or a token"
              songs:
                type: "array"
                items:
                  type: "object"
                  properties:
                    sid:
                      type: "integer"
                      example: 1
                    username:
                      type: "string"
                      example: "testUser"
                    title:
                      type: "string"
                      example: "A test song"
                    duration:
                      type: "integer"
                      example: 1
                    created:
                      type: "string"
                      example: "Wed, 13 Nov 2019 17:07:39 GMT"
                    public:
                      type: "integer"
                      example: 1
                    url:
                      type: "string"
                      example: "None"
                    cover:
                      type: "string"
                      example: "None"
                    likes:
                      type: "string"
                      example: 8
                    like_status:
                      type: "integer"
                      example: 0
                    description:
                      type: "string"
                      example: "A description"
              songs_per_page:
                type: "integer"
                example: 50
              total_pages:
                type: "integer"
                example: 2
        401:
          description: "User's token has expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Failed to decode token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/liked_songs:
    get:
      tags:
      - "audio"
      summary: "Get all of the liked songs of a selected user."
      description: "This endpoint takes several arguments and returns a subset of all the songs, liked by a certain user, on our system unordered. The arguments that can be provided are as follows:\n\n \"username\" = If a 'next_page' or 'back_page' argument is not sent, then this is a mandatory argument you must send. This should be set to the username of the user who's liked songs you are trying to view.\n\n \"songs_per_page\" = If a 'next_page' or 'back_page' argument is not sent, then this an optional argument you may send. This is used to adjust the number of songs you will get back per page of results.\n\n \"current_page\" = If a 'next_page' or 'back_page' argument is not sent, then this is an optional argument you may send. This is used to navigate through each of the pages of results. If this argument is not sent, the default page of results returned will be page 1.\n\n \"next_page\" = If this value is sent, then a back_page value should not be sent. This value should be set to a 'next_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request.\n\n \"back_page\" = If this value is sent, then a next_page value should not be sent. This value should be set to a 'back_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "username"
          type: "string"
          required: false
          description: "The username of the user who's songs you wish to view."
        - in: "query"
          name: "current_page"
          type: "string"
          required: false
          description: "The page of results you wish to view."
        - in: "query"
          name: "songs_per_page"
          type: "string"
          required: false
          description: "The number of songs you wish to have per page of results."
        - in: "query"
          name: "next_page"
          type: "string"
          required: false
          description: "A next page token to get the next page of results."
        - in: "query"
          name: "back_page"
          type: "string"
          required: false
          description: "A back_page token to get the previous page of results."
      responses:
        200:
          description: "Successful search query"
          schema:
            type: "object"
            properties:
              back_page:
                type: "string"
                example: "will be null or a token"
              current_page:
                type: "integer"
                example: 1
              next_page:
                type: "string"
                example: "will be null or a token"
              songs:
                type: "array"
                items:
                  type: "object"
                  properties:
                    sid:
                      type: "integer"
                      example: 1
                    username:
                      type: "string"
                      example: "testUser"
                    title:
                      type: "string"
                      example: "A test song"
                    duration:
                      type: "integer"
                      example: 1
                    created:
                      type: "string"
                      example: "Wed, 13 Nov 2019 17:07:39 GMT"
                    public:
                      type: "integer"
                      example: 1
                    url:
                      type: "string"
                      example: "None"
                    cover:
                      type: "string"
                      example: "None"
                    likes:
                      type: "string"
                      example: 8
                    like_status:
                      type: "integer"
                      example: 1
                    description:
                      type: "string"
                      example: "A description"
              songs_per_page:
                type: "integer"
                example: 50
              total_pages:
                type: "integer"
                example: 2
        401:
          description: "User's token has expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Failed to decode token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/like:
    post:
      tags:
      - "audio"
      summary: "Like a song"
      description: "By passing an access_token to this endpoint in the request header, along with the sid of the song you wish to like in the request body, you will then have liked that song."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "sid of the song you wish to like."
          required: true
          schema:
            type: "object"
            properties:
              sid:
                type: "integer"
                example: 1
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Song liked"
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/publish:
    post:
      tags:
      - "audio"
      summary: "Publish a song"
      description: "By passing an access_token to this endpoint in the request header, along with the sid of the song you wish to publish in the request body, you will update that songs visability to public, if you have permission to edit the song."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "sid of the song you wish to publish."
          required: true
          schema:
            type: "object"
            properties:
              sid:
                type: "integer"
                example: 1
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Song published."
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/rename:
    patch:
      tags:
      - "audio"
      summary: "Rename a song"
      description: "By passing an access_token to this endpoint in the request header, along with the sid of the song you wish to rename, and the new title you wish to rename the song to, in the request body, you will update that songs title, if you have permission to edit the song."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "sid of the song you wish to rename, and the new title."
          required: true
          schema:
            type: "object"
            properties:
              sid:
                type: "integer"
                example: 1
              title:
                type: "string"
                example: "NewSongName"
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Song renamed"
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/unpublish:
    post:
      tags:
      - "audio"
      summary: "Unpublish a song"
      description: "By passing an access_token to this endpoint in the request header, along with the sid of the song you wish to unpublish in the request body, you will update that songs visability to private, if you have permission to edit the song."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "sid of the song you wish to unpublish."
          required: true
          schema:
            type: "object"
            properties:
              sid:
                type: "integer"
                example: 1
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Song unpublished."
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/unlike:
    post:
      tags:
      - "audio"
      summary: "Unlike a song"
      description: "By passing an access_token to this endpoint in the request header, along with the sid of the song you wish to unlike in the request body, you will then have unliked that song."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "sid of the song you wish to unlike."
          required: true
          schema:
            type: "object"
            properties:
              sid:
                type: "integer"
                example: 1
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Song unliked"
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."

  /audio/song:
    get:
      tags:
      - "audio"
      summary: "Get the meta-data for a particular song"
      description: "Takes an sid as a query param and returns the meta data for that particular song."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "sid"
          type: "integer"
          required: true
          description: "The sid of the song you want info for."
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              song:
                type: "object"
                properties:
                  sid:
                    type: "integer"
                    example: 1
                  username:
                    type: "string"
                    example: "testUser"
                  title:
                    type: "string"
                    example: "A test song"
                  duration:
                    type: "integer"
                    example: 1
                  created:
                    type: "string"
                    example: "Wed, 13 Nov 2019 17:07:39 GMT"
                  public:
                    type: "integer"
                    example: 1
                  url:
                    type: "string"
                    example: "None"
                  cover:
                    type: "string"
                    example: "None"
                  likes:
                    type: "string"
                    example: 8
                  like_status:
                    type: "integer"
                    example: 0
                  description:
                      type: "string"
                      example: "A description"
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "sid param can't be empty!"
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/followers:
    get:
      tags:
      - "users"
      summary: "Get all of the followers of a particular user."
      description: "This endpoint takes several arguments and returns a subset of followers, of a particular user. The arguments that can be provided are as follows:\n\n \"username\" = If a 'next_page' or 'back_page' argument is not sent, then this argument is mandatory. This should be set to the username of the user who's followers you are trying to view.\n\n \"users_per_page\" = If a 'next_page' or 'back_page' argument is not sent, then this an optional argument you may send. This is used to adjust the number of users you will get back per page of results.\n\n \"current_page\" = If a 'next_page' or 'back_page' argument is not sent, then this is an optional argument you may send. This is used to navigate through each of the pages of results. If this argument is not sent, the default page of results returned will be page 1.\n\n \"next_page\" = If this value is sent, then a back_page value should not be sent. This value should be set to a 'next_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request.\n\n \"back_page\" = If this value is sent, then a next_page value should not be sent. This value should be set to a 'back_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "username"
          type: "string"
          required: false
          description: "The username of the user who's followers you wish to view."
        - in: "query"
          name: "current_page"
          type: "string"
          required: false
          description: "The page of results you wish to view."
        - in: "query"
          name: "users_per_page"
          type: "string"
          required: false
          description: "The number of users you wish to have per page of results."
        - in: "query"
          name: "next_page"
          type: "string"
          required: false
          description: "A next page token to get the next page of results."
        - in: "query"
          name: "back_page"
          type: "string"
          required: false
          description: "A back_page token to get the previous page of results."
      responses:
        200:
          description: "Query made successfully"
          schema:
            type: "object"
            properties:
              back_page:
                type: "string"
                example: "will be null or a token"
              current_page:
                type: "integer"
                example: 1
              next_page:
                type: "string"
                example: "will be null or a token"
              followers:
                type: "array"
                items:
                  type: "object"
                  properties:
                    username:
                      type: "string"
                      example: "AKoolUsername"
                    profiler:
                      type: "string"
                      example: "http://profile.pic.url"
                    follow_back:
                      type: "integer"
                      example: 0
              users_per_page:
                type: "integer"
                example: 50
              total_pages:
                type: "integer"
                example: 2
        401:
          description: "User's token has expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Failed to decode token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /users/following:
    get:
      tags:
      - "users"
      summary: "Get all of the users a particular user follows."
      description: "This endpoint takes several arguments and returns a subset of the users a particular user follows. The arguments that can be provided are as follows:\n\n \"username\" = If a 'next_page' or 'back_page' argument is not sent, then this argument is mandatory. This should be set to the username of the user who's followings you are trying to view.\n\n \"users_per_page\" = If a 'next_page' or 'back_page' argument is not sent, then this an optional argument you may send. This is used to adjust the number of users you will get back per page of results.\n\n \"current_page\" = If a 'next_page' or 'back_page' argument is not sent, then this is an optional argument you may send. This is used to navigate through each of the pages of results. If this argument is not sent, the default page of results returned will be page 1.\n\n \"next_page\" = If this value is sent, then a back_page value should not be sent. This value should be set to a 'next_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request.\n\n \"back_page\" = If this value is sent, then a next_page value should not be sent. This value should be set to a 'back_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "username"
          type: "string"
          required: false
          description: "The username of the user who's followings you wish to view."
        - in: "query"
          name: "current_page"
          type: "string"
          required: false
          description: "The page of results you wish to view."
        - in: "query"
          name: "users_per_page"
          type: "string"
          required: false
          description: "The number of users you wish to have per page of results."
        - in: "query"
          name: "next_page"
          type: "string"
          required: false
          description: "A next page token to get the next page of results."
        - in: "query"
          name: "back_page"
          type: "string"
          required: false
          description: "A back_page token to get the previous page of results."
      responses:
        200:
          description: "Query made successfully"
          schema:
            type: "object"
            properties:
              back_page:
                type: "string"
                example: "will be null or a token"
              current_page:
                type: "integer"
                example: 1
              next_page:
                type: "string"
                example: "will be null or a token"
              followers:
                type: "array"
                items:
                  type: "object"
                  properties:
                    username:
                      type: "string"
                      example: "AKoolUsername"
                    profiler:
                      type: "string"
                      example: "http://profile.pic.url"
                    follow_back:
                      type: "integer"
                      example: 0
              users_per_page:
                type: "integer"
                example: 50
              total_pages:
                type: "integer"
                example: 2
        401:
          description: "User's token has expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Failed to decode token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/playlist:
    post:
      tags:
      - "audio"
      summary: "Create a new playlist"
      description: "Create an empty playlist you can add songs too later"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the name of the new playlist"
          required: true
          schema:
            type: "object"
            properties:
              title:
                type: "string"
                example: "A great playlist"
      responses:
        200:
          description: "Playlist Created"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Playlist created"
              pid:
                type: "integer"
                example: 1
        401:
          description: "Access_token missing or expired."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Request missing access_token."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"
    delete:
      tags:
      - "audio"
      summary: "Delete a playlist"
      description: "Deletes the request playlist if the user has permission to delete it."
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the pid of the playlist you want to delete."
          required: true
          schema:
            type: "object"
            properties:
              pid:
                type: "integer"
                example: 1
      responses:
        200:
          description: "Playlist Deleted"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Playlist deleted"
        401:
          description: "Access_token missing or expired."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Request missing access_token."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"
    get:
      tags:
      - "audio"
      summary: "Get all of your playlists."
      description: "This endpoint takes several arguments and returns a subset of the playlists, of a particular user. The arguments that can be provided are as follows:\n\n \"playlists_per_page\" = If a 'next_page' or 'back_page' argument is not sent, then this an optional argument you may send. This is used to adjust the number of playlists you will get back per page of results.\n\n \"current_page\" = If a 'next_page' or 'back_page' argument is not sent, then this is an optional argument you may send. This is used to navigate through each of the pages of results. If this argument is not sent, the default page of results returned will be page 1.\n\n \"next_page\" = If this value is sent, then a back_page value should not be sent. This value should be set to a 'next_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request.\n\n \"back_page\" = If this value is sent, then a next_page value should not be sent. This value should be set to a 'back_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "current_page"
          type: "string"
          required: false
          description: "The page of results you wish to view."
        - in: "query"
          name: "playlists_per_page"
          type: "string"
          required: false
          description: "The number of playlists you wish to have per page of results."
        - in: "query"
          name: "next_page"
          type: "string"
          required: false
          description: "A next page token to get the next page of results."
        - in: "query"
          name: "back_page"
          type: "string"
          required: false
          description: "A back_page token to get the previous page of results."
      responses:
        200:
          description: "Query made successfully"
          schema:
            type: "object"
            properties:
              back_page:
                type: "string"
                example: "will be null or a token"
              current_page:
                type: "integer"
                example: 1
              next_page:
                type: "string"
                example: "will be null or a token"
              playlists:
                type: "array"
                items:
                  type: "object"
                  properties:
                    pid:
                      type: "integer"
                      example: 1
                    username:
                      type: "string"
                      example: "AUsername"
                    title:
                      type: "string"
                      example: "A Playlist"
                    created:
                      type: "string"
                      example: '2019-11-29 15:15:35.533935'
                    updated:
                      type: "string"
                      example: '2019-11-29 15:15:35.533935'
              playlists_per_page:
                type: "integer"
                example: 50
              total_pages:
                type: "integer"
                example: 2
        401:
          description: "User's token has expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Failed to decode token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
    patch:
      tags:
      - "audio"
      summary: "Rename a playlist"
      description: "Rename one of your existing playlists."
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the new name of the playlist & the pid"
          required: true
          schema:
            type: "object"
            properties:
              title:
                type: "string"
                example: "A great playlist"
              pid:
                type: "integer"
                example: 1
      responses:
        200:
          description: "Playlist Renamed"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Playlist renamed"
        401:
          description: "Access_token missing or expired."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Request missing access_token."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"
                
  /audio/playlist_songs:
    post:
      tags:
      - "audio"
      summary: "Add a song to your playlist"
      description: "Add a song to a playlist you own"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the pid of the playlist you want to add to & the sid of the song you wish to add."
          required: true
          schema:
            type: "object"
            properties:
              pid:
                type: "integer"
                example: 1
              sid:
                type: "integer"
                example: 1
      responses:
        200:
          description: "Song Added"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Song added"
        401:
          description: "Access_token missing or expired."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Request missing access_token."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"
    delete:
      tags:
      - "audio"
      summary: "Delete a song from your playlist"
      description: "Deletes the request song from the selected playlist if the user has permission to delete it."
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the pid of the playlist you want to delete from & the sid of the song you wish to delete from it."
          required: true
          schema:
            type: "object"
            properties:
              pid:
                type: "integer"
                example: 1
              sid:
                type: "integer"
                example: 1
      responses:
        200:
          description: "Song deleted from playlist."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Song removed"
        401:
          description: "Access_token missing or expired."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Request missing access_token."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable"
    get:
      tags:
      - "audio"
      summary: "Get all of the songs in a selected playlist."
      description: "This endpoint takes several arguments and returns a subset of the songs in a playlist, of a particular user. The arguments that can be provided are as follows:\n\n \"pid\" = If a 'next_page' or 'back_page' argument is not sent, then this is a mandatory argument you must send. This should be set to the pid of the playlist who's songs you are trying to view. \n\n \"songs_per_page\" = If a 'next_page' or 'back_page' argument is not sent, then this an optional argument you may send. This is used to adjust the number of songs you will get back per page of results.\n\n \"current_page\" = If a 'next_page' or 'back_page' argument is not sent, then this is an optional argument you may send. This is used to navigate through each of the pages of results. If this argument is not sent, the default page of results returned will be page 1.\n\n \"next_page\" = If this value is sent, then a back_page value should not be sent. This value should be set to a 'next_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request.\n\n \"back_page\" = If this value is sent, then a next_page value should not be sent. This value should be set to a 'back_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "pid"
          type: "integer"
          required: false
          description: "PID of the playlist who's songs you wish to retrieve"
        - in: "query"
          name: "current_page"
          type: "string"
          required: false
          description: "The page of results you wish to view."
        - in: "query"
          name: "songs_per_page"
          type: "string"
          required: false
          description: "The number of playlists you wish to have per page of results."
        - in: "query"
          name: "next_page"
          type: "string"
          required: false
          description: "A next page token to get the next page of results."
        - in: "query"
          name: "back_page"
          type: "string"
          required: false
          description: "A back_page token to get the previous page of results."
      responses:
        200:
          description: "Query made successfully"
          schema:
            type: "object"
            properties:
              back_page:
                type: "string"
                example: "will be null or a token"
              current_page:
                type: "integer"
                example: 1
              next_page:
                type: "string"
                example: "will be null or a token"
              songs:
                type: "array"
                items:
                  type: "object"
                  properties:
                    sid:
                      type: "integer"
                      example: 1
                    username:
                      type: "string"
                      example: "testUser"
                    title:
                      type: "string"
                      example: "A test song"
                    duration:
                      type: "integer"
                      example: 1
                    created:
                      type: "string"
                      example: "Wed, 13 Nov 2019 17:07:39 GMT"
                    public:
                      type: "integer"
                      example: 1
                    url:
                      type: "string"
                      example: "None"
                    cover:
                      type: "string"
                      example: "None"
                    likes:
                      type: "string"
                      example: 8
                    like_status:
                      type: "integer"
                      example: 0
                    description:
                      type: "string"
                      example: "A description"
              songs_per_page:
                type: "integer"
                example: 50
              total_pages:
                type: "integer"
                example: 2
        401:
          description: "User's token has expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Failed to decode token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
          
  /users/timeline:
    get:
      tags:
      - "users"
      summary: "Get the timeline of the current user."
      description: "This endpoint takes several arguments and returns a subset of posts and songs in reverse chronological order, created by the users the current user follows. The arguments that can be provided are as follows:\n\n\"songs_only\" = If set to True, the returned timeline will only contain songs for non_scroll token requests.\n\n\"posts_only\" = If set to True, the returned timeline will only contain posts for non_scroll token requests. \"items_per_page\" = If a 'next_page' or 'back_page' argument is not sent, then this an optional argument you may send. This is used to adjust the number of items you will get back per page of results.\n\n \"current_page\" = If a 'next_page' or 'back_page' argument is not sent, then this is an optional argument you may send. This is used to navigate through each of the pages of results. If this argument is not sent, the default page of results returned will be page 1.\n\n \"next_page\" = If this value is sent, then a back_page value should not be sent. This value should be set to a 'next_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request.\n\n \"back_page\" = If this value is sent, then a next_page value should not be sent. This value should be set to a 'back_page' token. These tokens are returned by standard requests to support infinited scrolling. Making a request with this token requires no other value to be passed as it encodes all required data for the next request.\n\n NOTE - The example below only shows a song object being returned. Post objects may also be returned that look as follows:\n\n{\n\"created\": \"Fri, 18 Jun 2010 04:38:52 GMT\",\n\"message\": \"ChJWmTrAaXPqjbjyAlBUkCEFeYnRQajs\",\n\"type\": \"post\",\n\"username\": \"username\"\n}"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "query"
          name: "songs_only"
          type: "boolean"
          required: false
          description: "Set to True to return only songs on a non-scroll request. All subsequent scroll-tokens generated will only make song_only requests."
        - in: "query"
          name: "posts_only"
          type: "boolean"
          required: false
          description: "Set to True to return only posts on a non-scroll request. All subsequent scroll-tokens generated will only make post_only requests."
        - in: "query"
          name: "current_page"
          type: "string"
          required: false
          description: "The page of results you wish to view."
        - in: "query"
          name: "items_per_page"
          type: "string"
          required: false
          description: "The number of items you wish to have per page of results."
        - in: "query"
          name: "next_page"
          type: "string"
          required: false
          description: "A next page token to get the next page of results."
        - in: "query"
          name: "back_page"
          type: "string"
          required: false
          description: "A back_page token to get the previous page of results."
      responses:
        200:
          description: "Query made successfully"
          schema:
            type: "object"
            properties:
              back_page:
                type: "string"
                example: "will be null or a token"
              current_page:
                type: "integer"
                example: 1
              next_page:
                type: "string"
                example: "will be null or a token"
              timeline:
                type: "array"
                items:
                  type: "object"
                  properties:
                    sid:
                      type: "integer"
                      example: 1
                    username:
                      type: "string"
                      example: "testUser"
                    title:
                      type: "string"
                      example: "A test song"
                    duration:
                      type: "integer"
                      example: 1
                    created:
                      type: "string"
                      example: "Wed, 13 Nov 2019 17:07:39 GMT"
                    public:
                      type: "integer"
                      example: 1
                    url:
                      type: "string"
                      example: "None"
                    cover:
                      type: "string"
                      example: "None"
                    likes:
                      type: "string"
                      example: 8
                    like_status:
                      type: "integer"
                      example: 0
                    description:
                      type: "string"
                      example: "A description"
                    type:
                      type: "string"
                      example: "song"
              items_per_page:
                type: "integer"
                example: 50
              total_pages:
                type: "integer"
                example: 2
        401:
          description: "User's token has expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Failed to decode token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
  /audio/description:
    patch:
      tags:
      - "audio"
      summary: "Update the description of the selected song."
      description: "Change a songs description (512 char limit) by sending an access_token for a user permitted to edit the song, the song ID, and the new description."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "header"
          name: "Authorization Header"
          description: "This is where you should set your access_token."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Send the required information."
          required: true
          schema:
            type: "object"
            properties:
              description:
                type: "string"
                example: "a description"
              sid:
                type: "integer"
                example: 1
                
      responses:
        200:
          description: "successful query"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Description updated."
        401:
          description: "Access_token expired"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Token expired."
        422:
          description: "Malformed request body."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "A req validation traceback will be here."
        500:
          description: "Server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Server failed to decode token."
        503:
          description: "Server is unavailable"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "MySQL unavailable."
                
x-aws-api-id: 'fvg2nhhlzk'